{"/home/travis/build/npmtest/node-npmtest-fbgraph/test.js":"/* istanbul instrument in package npmtest_fbgraph */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fbgraph/lib.npmtest_fbgraph.js":"/* istanbul instrument in package npmtest_fbgraph */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_fbgraph = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_fbgraph = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-fbgraph/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-fbgraph && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_fbgraph */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_fbgraph\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_fbgraph.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_fbgraph.rollup.js'] =\n            local.assetsDict['/assets.npmtest_fbgraph.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_fbgraph.__dirname +\n                    '/lib.npmtest_fbgraph.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-fbgraph/fbgraph/index.js":"module.exports = require('./lib/graph');\n","/home/travis/build/npmtest/node-npmtest-fbgraph/fbgraph/lib/graph.js":"/**\n * Module Dependencies\n */\n\nvar request      = require('request')\n  , qs           = require('qs')\n  , url          = require('url')\n  , crypto       = require('crypto')\n  , noop         = function(){};\n\n\n// Using `extend` from https://github.com/Raynos/xtend\nfunction extend(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i]\n      , keys   = Object.keys(source);\n\n    for (var j = 0; j < keys.length; j++) {\n      var name = keys[j];\n      target[name] = source[name];\n    }\n  }\n\n  return target;\n}\n\n\n/**\n * @private\n */\n\nvar accessToken          = null\n  , appSecret            = null\n  , graphUrl             = 'https://graph.facebook.com'\n  , graphVersion         = '2.4' // default to the oldest version\n  , oauthDialogUrl       = \"https://www.facebook.com/v2.0/dialog/oauth?\" // oldest version for auth\n  , oauthDialogUrlMobile = \"https://m.facebook.com/v2.0/dialog/oauth?\"   // oldest version for auth\n  , requestOptions       = {};\n\n/**\n * Library version\n */\n\nexports.version = '1.3.0';\n\n/**\n * Graph Stream\n *\n * @param {String} method\n * @param {String} url\n * @param {object/function} - postData\n * - object to be used for post\n * - assumed to be a callback function if callback is undefined\n * @param {function/undefined} - callback function\n */\n\nfunction Graph(method, url, postData, callback) {\n  if (typeof callback === 'undefined') {\n    callback  = postData;\n    postData  = {};\n  }\n\n  url           = this.prepareUrl(url);\n  this.callback = callback || noop;\n  this.postData = postData;\n\n  this.options          = extend({}, requestOptions);\n  this.options.encoding = this.options.encoding || 'utf-8';\n\n  // these particular set of options should be immutable\n  this.options.method         = method;\n  this.options.uri            = url;\n  this.options.followRedirect = false;\n\n  this.request = this[method.toLowerCase()]();\n\n  return this;\n}\n\n\n/**\n * \"Prepares\" given url string\n * - adds protocol and host prefix if none is given\n * @param {string} url string\n */\nGraph.prototype.prepareUrl = function(url) {\n  url = this.cleanUrl(url);\n\n  if (url.substr(0,4) !== 'http') {\n    url = graphUrl + '/v' + graphVersion + url;\n  }\n\n  return url;\n};\n\n/**\n * \"Cleans\" given url string\n * - adds lading slash\n * - adds access token if we have one\n * - adds appsecret_proof if we have an accessToken and appSecret\n * @param {string} url string\n */\n\nGraph.prototype.cleanUrl = function(url) {\n  url = url.trim();\n\n  // prep access token in url for appsecret proofing\n  var regex = /access_token=([^&]*)/;\n  var results = regex.exec(url);\n  var sessionAccessToken = results ? results[1] : accessToken;\n\n  // add leading slash\n  if (url.charAt(0) !== '/' && url.substr(0,4) !== 'http') url = '/' + url;\n\n  // add access token to url\n  if (accessToken && url.indexOf('access_token=') === -1) {\n    url += ~url.indexOf('?') ? '&' : '?';\n    url += \"access_token=\" + accessToken;\n  }\n\n  // add appsecret_proof to the url\n  if (sessionAccessToken && appSecret && url.indexOf('appsecret_proof') === -1) {\n    var hmac = crypto.createHmac('sha256', appSecret);\n    hmac.update(sessionAccessToken);\n\n    url += ~url.indexOf('?') ? '&' : '?';\n    url += \"appsecret_proof=\" + hmac.digest('hex');\n  }\n\n  return url;\n};\n\n/**\n * Gets called on response.end\n * @param {String|Object} body\n */\n\nGraph.prototype.end = function (body) {\n  var json = typeof body === 'string' ? null : body\n    , err  = null;\n\n  if (!json) {\n    try {\n\n      // this accounts for `real` json strings\n      if (~body.indexOf('{') && ~body.indexOf('}')) {\n        json = JSON.parse(body);\n\n      } else {\n        // this accounts for responses that are plain strings\n        // access token responses have format of \"accessToken=....&...\"\n        // but facebook has random responses that just return \"true\"\n        // so we'll convert those to { data: true }\n        if (!~body.indexOf('='))    body = 'data=' + body;\n        if (body.charAt(0) !== '?') body = '?' + body;\n\n        json = url.parse(body, true).query;\n      }\n\n    } catch (e) {\n      err = {\n          message: 'Error parsing json'\n        , exception: e\n      };\n    }\n  }\n\n  if (!err && (json && json.error)) err = json.error;\n\n  this.callback(err, json);\n};\n\n\n/**\n * https.get request wrapper\n */\n\nGraph.prototype.get = function () {\n  var self = this;\n\n  return request.get(this.options, function(err, res, body) {\n    if (err) {\n      self.callback({\n          message: 'Error processing https request'\n        , exception: err\n      }, null);\n\n      return;\n    }\n\n    if (~res.headers['content-type'].indexOf('image')) {\n      body = {\n          image: true\n        , location: res.headers.location\n      };\n    }\n\n    self.end(body);\n  });\n};\n\n\n/**\n * https.post request wrapper\n */\n\nGraph.prototype.post = function() {\n\n  var self     = this\n    , postData = qs.stringify(this.postData);\n\n  this.options.body  = postData;\n\n  return request(this.options, function (err, res, body) {\n    if (err) {\n      self.callback({\n          message: 'Error processing https request'\n        , exception: err\n      }, null);\n\n      return;\n    }\n\n    self.end(body);\n  });\n\n};\n\n/**\n * Accepts an url an returns facebook\n * json data to the callback provided\n *\n * if the response is an image\n * ( FB redirects profile image requests directly to the image )\n * We'll send back json containing  {image: true, location: imageLocation }\n *\n * Ex:\n *\n *    Passing params directly in the url\n *\n *      graph.get(\"zuck?fields=picture\", callback)\n *\n *    OR\n *\n *      var params = { fields: picture };\n *      graph.get(\"zuck\", params, callback);\n *\n *    GraphApi calls that redirect directly to an image\n *    will return a json response with relavant fields\n *\n *      graph.get(\"/zuck/picture\", callback);\n *\n *      {\n *        image: true,\n *        location: \"http://profile.ak.fbcdn.net/hprofile-ak-snc4/157340_4_3955636_q.jpg\"\n *      }\n *\n *\n * @param {object} params\n * @param {string} url\n * @param {function} callback\n */\n\nexports.get = function(url, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params   = null;\n  }\n\n  if (typeof url !== 'string') {\n    return callback({ message: 'Graph api url must be a string' }, null);\n  }\n\n  if (params)  {\n    url += ~url.indexOf('?') ? '&' : '?';\n    url += qs.stringify(params);\n  }\n\n  return new Graph('GET', url, callback);\n};\n\n/**\n * Publish to the facebook graph\n * access token will be needed for posts\n * Ex:\n *\n *    var wallPost = { message: \"heyooo budday\" };\n *    graph.post(friendID + \"/feed\", wallPost, callback);\n *\n * @param {string} url\n * @param {object} postData\n * @param {function} callback\n */\n\nexports.post = function (url, postData, callback) {\n  if (typeof url !== 'string') {\n    return callback({ message: 'Graph api url must be a string' }, null);\n  }\n\n  if (typeof postData === 'function') {\n    callback = postData;\n    postData = url.indexOf('access_token') !== -1 ? {} : {access_token: accessToken};\n  }\n\n  return new Graph('POST', url, postData, callback);\n};\n\n/**\n * Deletes an object from the graph api\n * by sending a \"DELETE\", which is really\n * a post call, along with a method=delete param\n *\n * @param {string} url\n * @param {object} postData (optional)\n * @param {function} callback\n */\n\nexports.del = function (url, postData, callback) {\n  if (!url.match(/[?|&]method=delete/i)) {\n    url += ~url.indexOf('?') ? '&' : '?';\n    url += 'method=delete';\n  }\n\n  if (typeof postData === 'function') {\n    callback = postData;\n    postData = url.indexOf('access_token') !== -1 ? {} : {access_token: accessToken};\n  }\n\n  return this.post(url, postData, callback);\n};\n\n\n/**\n * Perform a search on the graph api\n *\n * @param {object} options (search options)\n * @param {function} callback\n */\n\nexports.search = function (options, callback) {\n  options = options || {};\n  var url = '/search?' + qs.stringify(options);\n  return this.get(url, callback);\n};\n\n/**\n * Perform a batch query on the graph api\n *\n * @param  {Array}    reqs     An array containing queries\n * @param  {[Object]} additionalData Additional data to send, e.g. attachments or the `include_headers` parameter.\n * @param  {Function} callback\n *\n * @see https://developers.facebook.com/docs/graph-api/making-multiple-requests\n */\n\nexports.batch = function (reqs, additionalData, callback) {\n  if (!(reqs instanceof Array)) {\n    return callback({ message: 'Graph api batch requests must be an array' }, null);\n  }\n\n  if (typeof additionalData === 'function') {\n    callback = additionalData;\n    additionalData = {};\n  }\n\n  return new Graph('POST', '', extend({}, {\n    access_token: accessToken,\n    batch: JSON.stringify(reqs)\n  }, additionalData), callback);\n};\n\n\n/**\n * Perform a fql query or mutliquery\n * multiqueries are done by sending in\n * an object :\n *\n *     var query = {\n *         name:         \"SELECT name FROM user WHERE uid = me()\"\n *       , permissions:  \"SELECT \" + FBConfig.scope + \" FROM permissions WHERE uid = me()\"\n *     };\n *\n * @param {string/object} query\n * @param {object} params\n * @param {function} callback\n */\nexports.fql = function (query, params, callback) {\n  if (typeof query !== 'string') query = JSON.stringify(query);\n\n  var url = '/fql?q=' + encodeURIComponent(query);\n\n  if (typeof params === 'function') {\n    callback = params;\n    params = null;\n    return this.get(url, callback);\n  } else {\n    return this.get(url, params, callback);\n  }\n};\n\n\n/**\n * @param {object} params containing:\n *   - client_id\n *   - redirect_uri\n * @param {object} opts  Options hash. { mobile: true } will return mobile oAuth URL\n * @returns the oAuthDialogUrl based on params\n */\nexports.getOauthUrl = function (params, opts) {\n  var url = (opts && opts.mobile) ? oauthDialogUrlMobile : oauthDialogUrl;\n  return url + qs.stringify(params);\n};\n\n/**\n * Authorizes user and sets the\n * accessToken if everything worked out\n *\n * @param {object} params containing:\n *   - client_id\n *   - redirect_uri\n *   - client_secret\n *   - code\n * @param {function} callback\n */\n\nexports.authorize = function (params, callback) {\n  var self = this;\n\n  return this.get(\"/oauth/access_token\", params, function(err, res) {\n    if (!err) self.setAccessToken(res.access_token);\n\n    callback(err, res);\n  });\n};\n\n/**\n * Extends the expiration time of accessToken\n *\n * @param {object} params containing:\n *   - client_id\n *   - client_secret\n *   - access_token (optional)\n * @param {function} callback\n */\n\nexports.extendAccessToken = function (params, callback) {\n    var self = this;\n\n    params.grant_type        = 'fb_exchange_token';\n    params.fb_exchange_token = params.access_token ? params.access_token : this.getAccessToken();\n\n    return this.get(\"/oauth/access_token\", params, function(err, res) {\n      if (!err && !params.access_token) {\n        self.setAccessToken(res.access_token);\n      }\n\n      callback(err, res);\n    });\n};\n\n/**\n * Set request options.\n * These are mapped directly to the\n * `request` module options object\n * @param {Object} options\n */\n\nexports.setOptions = function (options) {\n  if (typeof options === 'object')  requestOptions = options;\n\n  return this;\n};\n\n/**\n * @returns the request options object\n */\n\nexports.getOptions = function() {\n  return requestOptions;\n};\n\n/**\n * Sets the access token\n * @param {string} token\n */\n\nexports.setAccessToken = function(token) {\n  accessToken = token;\n  return this;\n};\n\n/**\n * @returns the access token\n */\n\nexports.getAccessToken = function () {\n  return accessToken;\n};\n\n/**\n * Set's the Graph API version.\n * Note that you don't need to specify the 'v', just\n * add '2.1', '1.1' etc\n * @param {string} version\n */\nexports.setVersion = function (version) {\n  // set version\n  graphVersion = version;\n\n  // update auth urls\n  oauthDialogUrl       = \"http://www.facebook.com/v\"+version+\"/dialog/oauth?\"; // oldest version for auth\n  oauthDialogUrlMobile = \"http://m.facebook.com/v\"+version+\"/dialog/oauth?\";   // oldest version for auth\n\n  return this;\n};\n\n\n/**\n * Sets the app secret, used to verify all API calls if provided\n * @param {string} token\n */\n\nexports.setAppSecret = function(token) {\n  appSecret = token;\n  return this;\n};\n\n/**\n * @returns the app secret\n */\n\nexports.getAppSecret = function () {\n  return appSecret;\n};\n\n/**\n * sets graph url\n */\n\nexports.setGraphUrl = function (url) {\n  graphUrl = url;\n  return this;\n};\n\n/**\n * @returns the graphUrl\n */\n\nexports.getGraphUrl = function() {\n  return graphUrl;\n};\n"}